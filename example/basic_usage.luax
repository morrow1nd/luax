--[[ 
    This file shows basic usage.

    print(obj)  - show one obj to standard output. For a table, show it's every key-values

    see more inside function from Luax Reference Manual.
]]


--[[
    basic type
]]
print(nil);
print(true); -- boolean: true, false
print(3.1415); -- real number
print('hello, world!'); -- string
print({}); -- table
print(print); -- function achieved in luax or C

--[[
    variable declare
]]
local foo; -- init to nil
local a, b, c = 1, 2; -- c equals to nil


--[[
    table
]]
local tab = {};
tab.name = 'this is my name';
tab["name"] = "I change my name";
tab[1] = "number";
tab.subtab = {};
print(tab); -- show every key-value of tab to standard output
local meta_tab = tab[tab]; -- get the mata table of `tab`
meta_tab = meta_table(tab); -- or using inside function meta_table


--[[
    function
]]
local func = function(a, b) return a+b, a-b; end;  -- function can return several values
print(func(2, 1)); -- 3, 1

a, b, c = func(2, 1, 3);  -- multi-assign
print(a, b, c); -- 3, 1, nil

local func_sum = function()
    local i, sum = 0, 0;
    while i < arguments.size then  -- every function has a variable named arguments
        sum += arguments[i];
        i += 1;
    end
    return sum;
end;
print(func_sum(1, 2, 3)); -- 6


--[[
    closure example
]]
local createCounter = function(init_number) 
    local _inner = init_number; 
    return function() 
        _inner = _inner + 1; 
        return _inner; 
    end; 
end;

local init_number = 5;
local counter = createCounter(init_number);
counter();
print(counter()); -- 7
print(counter()); -- 8
print(init_number); -- 5


--[[
    inside function: pcall and throw
]]
local pcall_func = function(t, a, b)
    if t then throw('error'); end
    return a + b;
end;
local e, result = pcall(pcall_func, false, 1, 2); -- nil 3.0
e, result = pcall(pcall_func, true, 1, 2); -- error nil

local pcall_func_div_by_zero = function()
    return 1 / 0;
end;
print(pcall(pcall_func_div_by_zero)); -- div by 0 error



--[[
    _E: you can access the current environment by variable _E.
        By the way, _E["_E"] == _E
]]
print('=== show variable _E');
-- dump _E to standard output to see what it contains.
print(_E); -- notice the <SELF> node. it means this table has a key-value points to itself.