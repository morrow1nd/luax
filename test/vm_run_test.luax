--[[ 
    This is luax code for testing luax VM.

inside functions:
 + meta_table(tab)  - return the meta table of tab
 + set_meta_table(tab, new_meta_table)
 + table_get(tab, key)  - raw get, don't use the "_get" function of tab's meta table
 + table_set(tab, key, value)  - raw set
 + new_table(meta_table)  - create a table using the provided meta table

template debug functions:
 + print(obj)  - show one obj to standard output
 + dump_stack()  - dump runtime stack to standard output
 + emit_VS_breakpoint()  - emit visual studio breakpoint, so we can use visual studio's debug tool begin from here!

]]


--[[
    basic type
]]
print('=== basic type ===');
print(nil);
print(true); -- boolean: true, false
print(3.1415); -- real number
print('hello, world!'); -- string
print({}); -- table(something like Javascript's Object)
print(print); -- function achieved in luax or C

--[[
    variable declare
]]
local foo; -- init to nil
local a, b, c = 1, 2; -- c equals to nil


--[[
    table
]]
print('=== table ===');
local tab = {};
tab.name = 'Tom';
tab["key 1"] = 123;
tab[1] = "number";
tab.subtab = {};
tab.subtab.a = a;
tab.subtab.b = b;
print(tab); -- show every key-value of tab to standard output
local meta_tab = tab[tab];


--[[
    function
]]
print('=== function ===');
table_set(meta_tab, "_get", function(tab, key) return key; end);
print(tab["this is a key"]);
table_set(meta_tab, "_set", function(tab, key, value) print("this table is readonly"); end);
tab.name = "new name";

local a, b, c = 1, 2;
local func = function(a, b) return a + b, a, b; end;
a, b, c = func(a, b);
print(a, b, c); -- 3, 1, 2

local func1 = function(a, b, c) print('function arguments:', a, b, c); return c, b, a; end;
print(func1(1, 2));
print(func1(1, 2, 3, 4));
print(func1(1, 2, 3));


--[[
    closure
]]
print('=== closure ===');
local createCounter = function(init_number) 
    local _inner = init_number; 
    return function()  _inner = _inner + 1; return _inner; end; 
end;

local counter = createCounter(5);
counter();
print(counter()); -- 7
print(counter()); -- 8


--[[
    if-else, while
]]
a = 3;
print('=== if-else, while ===');
if true then
    print(true);
end
if a == 3 then
    print(true);
else
    print('error');
end
if a == 2 then
    print('error1');
else
    if a == 3 then
        print(true);
    else
        print('error2');
    end
end

local numbers = {};
numbers[0] = 20;
numbers[1] = 15;
numbers[2] = 50;
numbers[3] = 3;

a = 0;
emit_VS_breakpoint();
while a < 4 then
    print(numbers[a]);
    a = a + 1;
end


--[[
    _E: you can access the current environment by variable _E.
        local a = 123; <==> _E.a = 123;
        By the way, _E["_E"] == _E
]]
print('=== show variable _E');
print(_E); -- notice the <SELF> node. it means this table has a key-value points to itself.