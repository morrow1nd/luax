--[[ 
    This is luax code for testing luax VM.
    see example/*.luax for usage example
]]

-- test `print` function
print("luax VM test begin");
print(no_exist_variable); -- nil
print(); -- no output
print(nil);
print(true);
print(false);
print(1);
print(0);
print(-1);
print(0.000000001); -- 0.0
print('string');
print('\nnext line\t \\\'hello\'\\');
print("'hi'");
print({});
-- multi arguments
print(nil, true, false, 123.456, {}, 'string');


-- variable declaration
local _a;
local a, b, c;
a = 1;
-- try
--     print(a); -- 1
--     local a;
--     print(a); -- can't come to here
-- catch(e)
--     print(e);
-- end
local num, str, bool, nilv = 123, 'a string', false;
print(num, str, bool, nilv);

-- try
--     no_exist_variable = 1;  -- using undeclared variable
-- catch(e)
--     print(e);
-- end


-- function define and call
local func_ret_true = function() print('call func_ret_true'); return true; end;
print(func_ret_true());
print(func_ret_true(1, '2'));
--print()  TODO
local funcRetFunc = function()
    return function() return 'hello'; end;
end;
print(funcRetFunc()());
local funcRetTable__tab;
local funcRetTable = function()
    funcRetTable__tab = {};
    return funcRetTable__tab;
end;
funcRetTable().name = 'aa';
print(funcRetTable__tab.name);


-- operator on nil, boolean, numebr, string
a = 1; print(a);
-- a += 1; print(a);
-- a *= 2; print(a);
-- a /= 4; print(a);
a = 1 + 5 * 6.5 * (1 - 0.986); print(a);
bool = a == 1 and b == nil; print(bool);


-- table
local tab = {'key' : "value", 'key 2' : 56, 'key3': {}, 'key4' : function (a,b)return a+b; end};

local a = 1;
local b = 'hi';
local tab = {'key' : "value", 'key 2' : 56, 'subtab' : { 1: 'hi', 'tt' : 'kkk'}};
print(tab);
-- when the key of a table is `nil`
local tab_key_is_nil = {};
tab_key_is_nil[nil] = 'aaa';
print(tab_key_is_nil);
-- test case 30: `tab[func()]` == `tab[nil]` when func() doesn't return any value
local func30 = function() end;
local tab30 = {};
tab30[func30()] = 'aaa';
print(tab30);



-- ## inside function test

-- pcall throw test
print(pcall);
local pcall_func = function(t, a, b)
    if t then throw('error'); end
    print('pcall_func return');
    return a + b;
end;
print(pcall(pcall_func, false, 1, 2)); -- 3
print(pcall(pcall_func, true, 1, 2)); -- error
local pcall_func2 = function(t, a, b)
    if t <= 1 then
        print(pcall(pcall_func, true, 1, 2));
        print('t<=1');
    end
    if t >= 2 then
        print(pcall(pcall_func, false, 1, 2));
        print('t>=2');
    end
    if t == 0 then
        throw('1 error');
    end
    print('pcall_func2 return');
    return a - b;
end;
print(pcall(pcall_func2, 1, 2, 1));
print('---');
print(pcall(pcall_func2, 2, 2, 1));
print('---');
print(pcall(pcall_func2, 0, 2, 1));

local func_return_multi = function() return 1, 2; end;
print(pcall(func_return_multi));