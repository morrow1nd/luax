--[[ 
    This is luax code for testing luax VM.
    see example/*.luax for usage example
]]

-- test `print` function
print("luax VM test begin");
print(); -- no output
print(nil);
print(true);
print(false);
print(1);
print(0);
print(-1);
print(0.000000001); -- 0.0
print('string');
print('\nnext line\t \\\'hello\'\\');
print("'hi'");
print({});
-- multi arguments
print(nil, true, false, 123.456, {}, 'string');


--[[
  variable declaration
]]
local _a;
local a, b, c;
local i;
a = 1;
-- try
--     print(a); -- 1
--     local a;
--     print(a); -- can't come to here
-- catch(e)
--     print(e);
-- end
local num, str, bool, nilv = 123, 'a string', false;
print(num, str, bool, nilv);

-- try
--     no_exist_variable = 1;  -- using undeclared variable
-- catch(e)
--     print(e);
-- end


--[[
  function
]]
local func_ret_true = function() print('call func_ret_true'); return true; end;
print(func_ret_true());
print(func_ret_true(1, '2'));
--print()  TODO
local funcRetFunc = function()
    return function() return 'hello'; end;
end;
print(funcRetFunc()());
local funcRetTable__tab;
local funcRetTable = function()
    funcRetTable__tab = {};
    return funcRetTable__tab;
end;
funcRetTable().name = 'aa';
print(funcRetTable__tab.name);

-- test case 50: () shifts to one value
local func_ret_two_value = function() return 1, 2; end;
local a_50, b_50 = func_ret_two_value();
print(a_50, b_50);
a_50, b_50 = (func_ret_two_value()), 3;
print(a_50, b_50);

--test recursive calling
local func_call_itself = function(a)
    print(a);
    if a < 0 then
        return;
    end
    func_call_itself(a - 1);
    func_call_itself(a - 2);
end;
func_call_itself(2);

local func1_call_func2 = function(a)
    print(a);
    if a < 0 then
        return;
    end
    func2_call_func1(a - 2);
    func1_call_func2(a - 1);
end;
local func2_call_func1 = function(a)
    print(a);
    if a < 0 then
        return;
    end
    func1_call_func2(a - 2);
    func2_call_func1(a - 1);
end;
func1_call_func2(5);

-- test arguments
local func_with_arguments = function(a, b)
    print(a, b);
    local i = 0;
    local sum = 0;
    print('arguments.size:', arguments.size);
    while i < arguments.size then
        print(arguments[i]);
        sum += arguments[i];
        i += 1;
    end
    return sum;
end;
print(func_with_arguments(1, 2, 3, 4));
print(func_with_arguments(1)); -- arguments.size == 1 now, rather then 2

-- show a array, the number of elements is stored in tab.size
local show_array = function(tab)
    local i = 0;
    while i < tab.size then
        print(tab[i]);
        i += 1;
    end
end;

--[[
    example: closure
]]
local createCounter = function(init_number) 
    local _inner = init_number; 
    return function()  -- when create this function, it stores a reference to current environment
        _inner += 1;
        return _inner; 
    end; 
end;

local init_number = 5;
local counter = createCounter(init_number);
print(counter()); -- 6, when call this function, it will get `_inner` from the stored environment
print(counter()); -- 7
print(init_number); -- 5


--[[
  example: link several functions
]]
local func1 = function(arguments) show_array(arguments); print('call func1'); end;
local func2 = function(arguments) show_array(arguments); print('call func2'); end;
local add_functions = function()
    local funcs = arguments;
    return function()
        local i = 0;
        while i < funcs.size then
            funcs[i](arguments);
            i += 1;
        end
    end;
end;

local linked_func = add_functions(func1, func2);
linked_func(123, '456'); -- it will call func1, func2
--[[  output:
123.0
456
call func1
123.0
456
call func2
]]




--[[
  operator
]]
a = 1; print(a);
a += 1; print(a);
a *= 2; print(a);
a /= 4; print(a);
a = 1 + 5 * 6.5 * (1 - 0.986); print(a);
bool = a == 1 and b == nil; print(bool);

-- test a + b
print(1 + 2);
print(1 + "2"); -- 3
print("number" + "3");
print(33 + "number");
print("aa" + ", bb");
print(33 + true); -- 34
print(33 + false); -- 33
print("aa" + true);
print("33" + true);
print("123 hi" + 3);

-- test a - b
print(1 - 2);
print(2 - 1);
print("2" - 1);
print(1 - "2");
-- print(1 - "hi"); -- throw a exception

-- test += -= *= /=
a = 1;
a += 2;
print(a);
a += "3";
print(a);
a -= "4";
print(a);
local b = 4;
a *= b;
print(b);
print(a);
a /= 2;
print(a);
a += "4 hi";
print(a);

-- test = operator
i = true;
while i = nil then
    print('error');
end



--[[
  table
]]
local tab = {'key' : "value", 'key 2' : 56, 'key3': {}, 'key4' : function (a,b)return a+b; end};

local a = 1;
local b = 'hi';
local tab = {'key' : "value", 'key 2' : 56, 'subtab' : { 1: 'hi', 'tt' : 'kkk'}};
print(tab);
-- when the key of a table is `nil`
local tab_key_is_nil = {};
tab_key_is_nil[nil] = 'aaa';
print(tab_key_is_nil);
-- test case 30: `tab[func()]` == `tab[nil]` when func() doesn't return any value
local func30 = function() end;
local tab30 = {};
tab30[func30()] = 'aaa';
print(tab30[nil]); -- aaa
-- test case 31
local func_ret_1_2 = function() return 1, 2; end;
local c31_tab = { 1 : 1, 2 : 2 };
print(c31_tab[func_ret_1_2()]); -- 1


--[[
  inside function test
]]

-- pcall throw test
print(pcall);
local pcall_func = function(t, a, b)
    if t then throw('error'); end
    print('pcall_func return');
    return a + b;
end;
print(pcall(pcall_func, false, 1, 2)); -- nil, 3
print(pcall(pcall_func, true, 1, 2)); -- error
local pcall_func2 = function(t, a, b)
    if t <= 1 then
        print(pcall(pcall_func, true, 1, 2));
        print('t<=1');
    end
    if t >= 2 then
        print(pcall(pcall_func, false, 1, 2));
        print('t>=2');
    end
    if t == 0 then
        throw('1 error');
    end
    print('pcall_func2 return');
    return a - b;
end;
print(pcall(pcall_func2, 1, 2, 1));
print('---');
print(pcall(pcall_func2, 2, 2, 1));
print('---');
print(pcall(pcall_func2, 0, 2, 1));

local func_return_multi = function() return 1, 2; end;
print(pcall(func_return_multi));

--[[
  if-while
]]
if true then
    local a  =1;
else
    local b = 1;
end

if true then
    local a = 1;
else
    local b = 1;
    if true then
        local c = 1;
    end
    local d = 1;
end

a = 1;
while true then
    local a = 2;
    if true then
        break;
    else 
        print(1);
    end
    local c = 2;
end

local func_call_self2 = function(a)
    print(a);
    if a <= 0 then
        return;
    end
    local i = 0;
    while i < 4 then
        i = i + 1;
    end
    while true then
        i = i - 1;
        if true then
            i = i + 1;
            if true then
                break;
            end
        end
    end
    func_call_self2(a - 1);
    func_call_self2(a - 2);
end;
func_call_self2(3);


i = 0;
while i < 10 then
    i = i + 1;
    if i == 4 then
        continue;
    end
    if i == 6 then
        continue;
    end
    print(i);
end


-- test table_next

local tab = {};
tab.name = "I'm a table";
tab.key = "this is a key";
tab[2] = "2";
tab[1] = 1;
tab.lastone = "lastone value";

local i = nil;
while i = table_next(tab, i) then
    if i == tab then continue; end
    print('key, value:');
    print(i, tab[i]);
end

-- test table_prev
i = nil;
while i = table_prev(tab, i) then
    if i == tab then continue; end
    print('key, value:');
    print(i, tab[i]);
end