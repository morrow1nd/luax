-- var declare
local foo;
local aa, bb;
local tem, aa = 1, 2, 3;


--[[
	expressions
--]]

-- arithmetic expressions
a + b;
a - 555;
a + b * 56;
a * (b + c);

-- logical expressions
a < b;
a > b;
a <= b;
a >= b;
a == b;
a != b;
a < b and c <d;
a != b or b != c;
not b == a;

-- literal expressions
nil;
false;
true;
123;
10.56;
"a string\n\t\\\"you can use this\"\nthis string is end";
'"another string"\'hi\rtab\n\\n <-here';
{'key' : "value", 'key 2' : 56, 'key3': {}, 'key4' : function (a,b)return a+b; end};

-- function call&define expressions
func();
func(a, b, c);
func(nil);
funcb(56, 'uu')(); -- funcb return a function
function(a, b) return a - b; end;
function (a, b, c)
	return a + b + c;
end(1,2,3); -- call after define, return 6

-- suffix expressions
a["key 3"];
mula[func(1,2)]; -- using the first return value of func
a["key 3"][56];
a[str + '.png'];
a[func() / 2];
a.key2;
a.key2.key2;
a.key2['username'];
a.key2['opcode'](1, 2);
func()["username"];

func()();
(func())();
(func())[56][(1 + 2) * a];


-- assignment expressions
a, b = b, a;
a, b = 1, 2, 3;
a, b, c = 1, 2;
a, b = func();
a = b, c; -- equal to `a = b`;
a += expr;
a *= 1 + 5;
a -= 1 * 5;
a += 1 == 1;
aaa = tab[a];
tab['key'] = 123;
func()['key2'] = tab['key3'] + 456;
func() += b; -- function func would be called twice


-- prefix expressions
a = -a;
a = - 5 + 6; -- a == 1, rather then -11


--[[
	statement
--]]

-- empty statement
;

-- if statement
if expr then
	stmt;
end

-- if_else statement
if expr then
	stmt;
else
	stmt;
end

-- while statement
while expr then
	stmt;
	break;
	continue;
end

-- for statement
for i = 5; i < 700; i = i + 1 then
	-- empty
end

-- complex statement
show('begin');
for i = 0; i < 100; i += 1 then
	local j = 56;
	while j < func(i) then
		j += func_test(i, j);
		aaa[j] = function(a, b) return a * b + j; end;
		if sqrt(j) == 0.2 then
			continue;
		end
		if sqrt(j) == 0.5 then
			break;
		end
	end
	show(i);
	if sqrt(i) > 0.5 then
		break;
	end
end
show('end');