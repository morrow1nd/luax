// The luax parser should be able to go through these tests.

/* c-style comment */
// cpp-style comment
-- lua-style comment
--[[ 
	lua-style multi-line comment 
]]


-- var declare
local foo;

//
// statement
//

-- if statement
if expr then
	stmt;
end

-- if_else statement
if expr then
	stmt;
else
	stmt;
end

-- while statement
while expr then
	stmt;
	break;
	continue;
end


//
// expressions
//

-- arithmetic expressions
a + b;
a - 555;
a + b * 56;
a * (b + c);

-- logical expressions
a < b;
a > b;
a <= b;
a >= b;
a == b;
a != b;
a < b and c <d;
a != b or b != c;
not b == a;

-- literal expressions
123;
10.56;
'a string';
"another string";
{key : "value", 'key 2' : 56, key3: {}, key3 : function (a,b)return a+b; end};

-- function call&define expressions
func();
func(a, b, c);
func(nil);
funcb(56, 'uu')(); -- funcb return a function
function(a, b) return a - b; end
function (a, b, c)
	return a + b + c;
end(1,2,3); -- call after define, return 6

-- assignment expressions
a, b = b, a;
a, b = func();
a = b, c; -- equal to `a = b`;

-- prefix expressions
a = -a;

-- suffix expressions
a["key 3"];
a["key 3"][56];
a[str + '.png'];
a[func() / 2];
a.key2;
a.key2.key2;
a.key2['username'];
a.key2['opcode'](1, 2);
func()["username"];

